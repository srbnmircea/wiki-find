<!DOCTYPE html>
<html>
<head>
  <title>Wiki Find</title>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
  <script src="https://code.jquery.com/jquery-3.1.1.js"   integrity="sha256-16cdPddA6VdVInumRGo6IbivbERE8p7CQR3HzTBuELA="   crossorigin="anonymous"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
  <script src="http://ajax.aspnetcdn.com/ajax/knockout/knockout-2.2.1.js"></script>
</head>
<body>
  <div id="main" class="container">
    <div class="page-header">
      <h1>Wiki Find</h1>
    </div>
    <p class="lead">Wiki Find is a simple search engine that shows the smallest distance between two Wikipedia articles
       using their reference links as unit of measurement</p>
    <div id="articleSearch">
      <div class="form-group">
        <label for="fromArticle">From article</label>
        <input data-bind="value: fromArticle" type="text" class="form-control" id="fromArticle" placeholder="From article">
      </div>
      <div class="form-group">
        <label for="toArticle">To article</label>
        <input data-bind="value: toArticle" type="text" class="form-control" id="toArticle" placeholder="To article">
      </div>
      <button data-bind="click: getPath" type="button" class="btn btn-primary btn-lg btn-block">Search</button>
      <br />
      <pre class="text-center" data-bind="text: path"></pre>
    </div>  
    <hr />
    <button data-target="#tutorial" type="button" class="btn btn-primary btn-lg btn-block" 
            data-toggle="collapse" aria-expanded="false" aria-controls="tutorial">Tutorial</button>
    <div class="collapse" id="tutorial">
      <br />
      <p class="lead">How to perform a search</p>
      <pre class="text-left">
        Example input

        From article: House (TV Series)

        To artcile: television program

        Example output

        House -> medical drama -> television program
      </pre>
      <p class="lead">Wiki Find also has the option to return all the links contained in an article</p>
      <pre class="text-left">
        Example input

        Article title: House (TV Series)

        Example output

        medical drama, FOX broadcasting company, Gregory House, etc.
      </pre>
    </div>
    <br />
    <button data-target="#linkSearch" type="button" class="btn btn-primary btn-lg btn-block" 
            data-toggle="collapse" aria-expanded="false" aria-controls="linkSearch">Get article links</button>
    <div class="collapse" id="linkSearch">
      <div class="form-group">
        <label for="articleTitle"><h4>Article title</h4></label>
        <div class="form-inline">
          <input data-bind="value: articleTitle" type="text" class="form-control" id="articleTitle" placeholder="Article title" style="width:1054px">
          <button data-bind="click: getLinks" type="submit" class="btn btn-default" id="getLinks">Get links</button>
        </div>
      </div>  
      <div id="linkList" class="hidden">
        <ul class="list-group">
          <li class="list-group-item"><strong><span data-bind="text: articleTitle"></span> has the following links</strong></li>
          <!-- ko foreach: links -->
            <li class="list-group-item"><span data-bind="text: $data"></span></li>
          <!-- /ko -->
        </ul>
      </div>
    </div>
  </div>
  <br />

  <script type="text/javascript">

    function ArticleSearchViewModel() {
      var self = this;
      self.fromArticle = ko.observable("");
      self.toArticle = ko.observable("");
      self.path = ko.observable(" -- Search Result --");

      self.pathURI = ko.computed(function() {
        return "http://localhost:5000/api/path/" + self.fromArticle() + "&" + self.toArticle();
      }, self);

      self.ajax = function(uri, method) {
        var request = {
          url: uri,
          type: method,
        };
        return $.ajax(request);
      };

      self.getPath = function() {
        self.ajax(self.pathURI(), "GET").done(function(data) {
          if (data == "") {
            self.path("Invalid input or not enough data");
          }
          else {
            self.path(data);
          }
        });
      };
    }

    function LinkSearchViewModel() {
      var self = this;
      self.articleTitle = ko.observable("");
      self.links = ko.observableArray();

      self.articleURI = ko.computed(function() {
        return "http://localhost:5000/api/links/" + self.articleTitle(); 
      }, self); 

      self.ajax = function(uri, method) {
        var request = {
            url: uri,
            type: method,
        };
        return $.ajax(request);
      };

      self.getLinks = function() {
        $("#linkList").removeClass("hidden");

        self.ajax(self.articleURI(), "GET").done(function(data) {
          if ($.parseJSON(data) == "") {
            self.links([]);
            self.links.push("Invalid title or article has not yet been crawled"); 
          }
          else {
            self.links([]);
            data = $.parseJSON(data);
            for (var i = 0; i < data.length; i++) {
              self.links.push(data[i]);
            }
          }
        });
      };
    }

    var linkSearchViewModel = new LinkSearchViewModel();
    var articleSearchViewModel = new ArticleSearchViewModel();
    ko.applyBindings(articleSearchViewModel, $("#articleSearch")[0]);
    ko.applyBindings(linkSearchViewModel, $("#linkSearch")[0]);
  </script>
</body>
</html>
